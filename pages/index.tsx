import React, { useState, useEffect } from "react";
import Head from "next/head";
import { Layout } from "../components/Layout";
import { Pokemon } from "../interfaces/pokemon";
import PokemonCard from "../components/PokemonCard";
import NameSearch from "../components/NameSearch";
import PowerSearch from "../components/PowerSearch";
import styled from "styled-components";

const List = styled.div`
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 10px;
  align-items: center;
  text-align: center;
`;

const calculatePower = (pokemon: Pokemon) => {
  pokemon.total_points =
    pokemon.hp +
    pokemon.attack +
    pokemon.defense +
    pokemon.special_attack +
    pokemon.special_defense +
    pokemon.speed;
};

const HomePage = ({ pokemons }: { pokemons: Pokemon[] }) => {
  const [pokemonsList, setPokemonsList] = useState(pokemons);
  const [alertNameMessage, setAlertNameMessage] = useState("");
  const [alertPowerMessage, setAlertPowerMessage] = useState("");
  const [minPower, setMinPower] = useState(0);
  const [maxPower, setMaxPower] = useState(0);
  const [totalNum, setTotalNum] = useState(0);

  const handleSearchName = (searchName: string) => {
    if (searchName.length === 0) {
      setPokemonsList(pokemons);
      setAlertNameMessage("Please enter something to search...");
    } else {
      let newList = pokemons.filter((poke) =>
        poke.name.toLocaleLowerCase().includes(searchName)
      );
      setPokemonsList(newList);
      setAlertNameMessage("");
      handlePowersRange(newList);
    }
  };

  const handleSearchPower = (searchNum: number) => {
    if (searchNum === 0) {
      setPokemonsList(pokemons);
      setAlertPowerMessage("Please enter a valid number...");
    } else {
      let newList = pokemons.filter((poke) => poke.total_points >= searchNum);
      setPokemonsList(newList);
      setAlertPowerMessage("");
      handlePowersRange(newList);
    }
  };

  const handlePowersRange = (pokemonsList: Pokemon[]) => {
    console.log(pokemonsList, "handlePowersRange");
    let powersList = Array();

    pokemonsList.forEach((poke) => {
      console.log(poke.total_points);
      return powersList.push(poke.total_points);
    });

    setMaxPower(powersList.sort((a, b) => b - a)[0]);
    setMinPower(powersList.sort((a, b) => a - b)[0]);

    console.log(maxPower, "dfd");
  };

  useEffect(() => {
    setTotalNum(pokemonsList.length);
  }, [pokemonsList]);

  useEffect(() => {
    handlePowersRange(pokemons);
  }, []);

  return (
    <>
      <Head>
        <title>Technical test next.js and typescript</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <NameSearch handleSearchName={handleSearchName} />
        <p style={{ color: "red" }}>{alertNameMessage}</p>
        <PowerSearch handleSearchPower={handleSearchPower} />
        <p style={{ color: "red" }}>{alertPowerMessage}</p>
        <div>Power threshold: {minPower}</div>
        <div>Count over threshold: {totalNum}</div>
        <div>Min: {minPower}</div>
        <div>Max: {maxPower}</div>
      </div>
      <h1>Pokemon list</h1>
      <List>
        {pokemonsList.map((pokemon) => {
          calculatePower(pokemon);
          return <PokemonCard pokemon={pokemon} />;
        })}
      </List>
    </>
  );
};

HomePage.getLayout = Layout;

export async function getServerSideProps() {
  try {
    const pokemons = await fetch("http://localhost:3000/api/pokemons").then(
      (resp) => resp.json()
    );
    return { props: { pokemons } };
  } catch (error) {
    return {
      notFound: true,
    };
  }
}

export default HomePage;
